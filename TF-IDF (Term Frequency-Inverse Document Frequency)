import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Wczytywanie danych (upewnij się, że ścieżka do pliku jest poprawna)
file_path = 'TextBrexit2_text.txt'
with open(file_path, 'r', encoding='utf-8') as file:
    data = file.readlines()

labels = []
texts = []
for line in data:
    split_line = line.strip().split('\t')
    labels.append(int(split_line[0]))
    cleaned_text = re.sub('[^a-zA-Z\s]', '', split_line[1]).lower()
    texts.append(cleaned_text)

# Podział danych na zestawy treningowe i testowe z użyciem mieszania
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.15, random_state=21, shuffle=True)

# TF-IDF wektorizacja
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Definicja modelu SVM i parametrów do Grid Search
svm_model = SVC()
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': ['scale', 'auto'],
    'kernel': ['linear', 'rbf']
}

# Ustawienie GridSearchCV
grid_search = GridSearchCV(estimator=svm_model, param_grid=param_grid, cv=5, verbose=1, n_jobs=-1)
grid_search.fit(X_train_tfidf, y_train)

# Najlepszy model z Grid Search
best_svm = grid_search.best_estimator_

# Predykcja na danych testowych
y_pred = best_svm.predict(X_test_tfidf)

# Ocena modelu
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Wyświetlanie wyników w języku polskim
print("Najlepsze parametry:", grid_search.best_params_)
print("Dokładność:", accuracy)
print("Raport klasyfikacji:\n", report)
